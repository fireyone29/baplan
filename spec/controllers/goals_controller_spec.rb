require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold
# generator.  It demonstrates how one might use RSpec to specify the
# controller code that was generated by Rails when you ran the
# scaffold generator.
#
# It assumes that the implementation code is generated by the rails
# scaffold generator.  If you are using any extension libraries to
# generate different controller code, this generated spec may or may
# not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are
# a number of tools you can use to make these specs even more
# expressive, but we're sticking to rails and rspec-rails APIs to keep
# things simple and stable.
#
# Compared to earlier versions of this generator, there is very
# limited use of stubs and message expectations in this spec.  Stubs
# are only used when there is no simpler way to get a handle on the
# object needed for the example.  Message expectations are only used
# when there is no simpler way to specify that an instance is
# receiving a specific message.

RSpec.describe GoalsController, type: :controller do
  let!(:user) { FactoryBot.create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Goal. As you add validations to Goal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:goal, user_id: user.id)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:goal, user_id: user.id, description: '')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GoalsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    let!(:goal) { Goal.create! valid_attributes }
    subject { get :index, params: {} }

    context 'when signed in', :signed_in do
      it 'assigns all goals as @goals' do
        subject
        expect(assigns(:goals)).to eq([goal])
      end

      context 'with goals from multiple users' do
        let!(:goal2) { FactoryBot.create(:goal) }

        it 'only includes goals owned by the current user' do
          expect(Goal.count).to eq 2
          subject
          expect(assigns(:goals)).to eq([goal])
        end
      end
    end

    it_behaves_like 'rejects unauthorized access'
  end

  describe 'GET #show' do
    let(:goal) { Goal.create! valid_attributes }
    subject { get :show, params: { id: goal.to_param } }

    it 'assigns the requested goal as @goal', :signed_in do
      subject
      expect(response).to be_successful
      expect(assigns(:goal)).to eq(goal)
    end

    it_behaves_like 'rejects unauthorized access'

    context 'with goals from other users', :signed_in do
      let(:goal) { FactoryBot.create(:goal) }

      it 'does not display goals from other users' do
        subject
        expect(response).not_to be_successful
        expect(response).to redirect_to(goals_path)
      end
    end
  end

  describe 'GET #new' do
    subject { get :new, params: {} }

    it 'assigns a new goal as @goal', :signed_in do
      subject
      expect(assigns(:goal)).to be_a_new(Goal)
    end

    it_behaves_like 'rejects unauthorized access'
  end

  describe 'GET #edit' do
    let(:goal) { Goal.create! valid_attributes }
    subject { get :edit, params: { id: goal.to_param } }

    it 'assigns the requested goal as @goal', :signed_in do
      subject
      expect(assigns(:goal)).to eq(goal)
    end

    context 'with goals from other users', :signed_in do
      let(:goal) { FactoryBot.create(:goal) }

      it 'does not display goals from other users' do
        subject
        expect(response).not_to be_successful
        expect(response).to redirect_to(goals_path)
      end
    end

    it_behaves_like 'rejects unauthorized access'
  end

  describe 'POST #create' do
    context 'with valid params', :signed_in do
      subject { post :create, params: { goal: valid_attributes } }

      it 'creates a new Goal' do
        expect{subject}.to change(Goal, :count).by(1)
      end

      it 'assigns a newly created goal as @goal' do
        subject
        expect(assigns(:goal)).to be_a(Goal)
        expect(assigns(:goal)).to be_persisted
      end

      it 'redirects to the created goal' do
        subject
        expect(response).to redirect_to(Goal.last)
      end
    end

    context 'with invalid params', :signed_in do
      subject { post :create, params: { goal: invalid_attributes } }

      it 'assigns a newly created but unsaved goal as @goal' do
        subject
        expect(assigns(:goal)).to be_a_new(Goal)
      end

      it 're-renders the new template' do
        subject
        expect(response).to render_template('new')
      end
    end

    it_behaves_like 'rejects unauthorized access' do
      subject { post :create, params: { goal: valid_attributes } }
    end
  end

  describe 'PUT #update' do
    let!(:goal) { Goal.create! valid_attributes }
    let(:previous_url) { 'abs123' }
    let(:session) { { goals_previous_url: previous_url } }

    context 'with valid params', :signed_in do
      let(:new_description) { 'latest and greatest description' }
      let(:new_attributes) {
        {
          description: new_description
        }
      }
      let(:params) { { id: goal.to_param, goal: new_attributes } }
      subject { put :update, params: params, session: session }

      it 'updates the requested goal' do
        subject
        goal.reload
        expect(goal.description).to eql new_description
      end

      it 'assigns the requested goal as @goal' do
        subject
        expect(assigns(:goal)).to eq(goal)
      end

      it 'redirects to the goal' do
        subject
        expect(response).to redirect_to previous_url
      end

      context 'with goals from other users' do
        let!(:goal) { FactoryBot.create(:goal) }

        it 'does not update goals from other users' do
          subject
          goal.reload
          expect(goal.description).not_to eql new_description
          expect(response).to redirect_to(goals_path)
        end
      end
    end

    context 'with invalid params', :signed_in do
      let(:params) { { id: goal.to_param, goal: invalid_attributes } }
      subject { put :update, params: params }

      it 'assigns the goal as @goal' do
        subject
        expect(assigns(:goal)).to eq(goal)
      end

      it 're-renders the edit template' do
        subject
        expect(response).to render_template('edit')
      end
    end

    it_behaves_like 'rejects unauthorized access' do
      let(:params) { { id: goal.to_param, goal: invalid_attributes } }
      subject { put :update, params: params }
    end
  end

  describe 'DELETE #destroy' do
    let!(:goal) { Goal.create! valid_attributes }
    subject { delete :destroy, params: { id: goal.to_param } }

    context 'when signed in', :signed_in do
      it 'destroys the requested goal' do
        expect{subject}.to change(Goal, :count).by(-1)
      end

      it 'redirects to the goals list' do
        subject
        expect(response).to redirect_to(goals_url)
      end

      context 'with goals from other users' do
        let!(:goal) { FactoryBot.create(:goal) }

        it 'does not delete goals from other users' do
          expect{subject}.not_to change(Goal, :count)
          expect(response).to redirect_to(goals_path)
        end
      end
    end

    it_behaves_like 'rejects unauthorized access'
  end
end
